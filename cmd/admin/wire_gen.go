// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-keg/example/internal/app/admin/biz"
	"github.com/go-keg/example/internal/app/admin/conf"
	"github.com/go-keg/example/internal/app/admin/data"
	"github.com/go-keg/example/internal/app/admin/job"
	"github.com/go-keg/example/internal/app/admin/schedule"
	"github.com/go-keg/example/internal/app/admin/server"
	"github.com/go-keg/example/internal/app/admin/service/graphql"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func initApp(logger log.Logger, config *conf.Config) (*kratos.App, func(), error) {
	client, err := data.NewEntClient(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := data.NewEntDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	accountUseCase := biz.NewAccountUseCase(config)
	executableSchema := graphql.NewSchema(logger, database, accountUseCase)
	httpServer := server.NewHTTPServer(config, logger, client, executableSchema)
	dataData, cleanup, err := data.NewData(client, database, logger)
	if err != nil {
		return nil, nil, err
	}
	jobJob := job.NewJob(logger, config, dataData)
	syncProducer, err := data.NewKafkaProducer(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	daily := schedule.NewDaily(database, syncProducer)
	scheduleSchedule := schedule.NewSchedule(logger, client, daily)
	app := newApp(logger, httpServer, jobJob, scheduleSchedule)
	return app, func() {
		cleanup()
	}, nil
}
